import json
import os
from aiogram import Bot, Dispatcher, executor, types
from flask import Flask
from threading import Thread

# üîë –¢–æ–∫–µ–Ω –≤—ñ–¥ BotFather
API_TOKEN = "8065465326:AAEV8aYGEEgDyWZwPZikBJIwl7LkB99TU5I"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# ---------------------------
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è
# ---------------------------
def load_json(filename, default):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        save_json(filename, default)
        return default

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
ADMINS = load_json("admins.json", [7618560125, 6964713379])  # —Ç–≤—ñ–π –∞–π–¥—ñ —Ç—É—Ç
BANNED = load_json("banned.json", [])
if os.path.exists("dz.txt"):
    with open("dz.txt", "r", encoding="utf-8") as f:
        homework_text = f.read().strip()
else:
    homework_text = "–î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚ùå"


# ---------------------------
# –ö–æ–º–∞–Ω–¥–∏
# ---------------------------

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if message.from_user.id in BANNED:
        return await message.answer("‚õî –¢–µ–±–µ –∑–∞–±–∞–Ω–µ–Ω–æ!")
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìö –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è")
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! üëã\n–©–æ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞?", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == "üìö –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è")
async def show_homework(message: types.Message):
    if message.from_user.id in BANNED:
        return await message.answer("‚õî –¢–µ–±–µ –∑–∞–±–∞–Ω–µ–Ω–æ!")
    await message.answer(f"üìå –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è:\n\n{homework_text}")


@dp.message_handler(commands=["setdz"])
async def set_homework(message: types.Message):
    global homework_text
    if message.from_user.id in ADMINS:
        args = message.get_args()
        if args:
            homework_text = args
            with open("dz.txt", "w", encoding="utf-8") as f:
                f.write(homework_text)
            await message.answer("‚úÖ –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await message.answer("‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Ç–∞–∫: /setdz –¢–µ–∫—Å—Ç_–∑–∞–≤–¥–∞–Ω–Ω—è")
    else:
        await message.answer("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –º—ñ–Ω—è—Ç–∏ –î–ó!")


# ---------------------------
# –ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏
# ---------------------------

@dp.message_handler(commands=["ban"])
async def ban_user(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.get_args()
        if args.isdigit():
            user_id = int(args)
            if user_id not in BANNED:
                BANNED.append(user_id)
                save_json("banned.json", BANNED)
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑–∞–±–∞–Ω–µ–Ω–æ!")
            else:
                await message.answer("‚ö†Ô∏è –í—ñ–Ω –≤–∂–µ —É –±–∞–Ω—ñ!")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–∞–∫: /ban user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –±–∞–Ω–∏—Ç–∏!")


@dp.message_handler(commands=["unban"])
async def unban_user(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.get_args()
        if args.isdigit():
            user_id = int(args)
            if user_id in BANNED:
                BANNED.remove(user_id)
                save_json("banned.json", BANNED)
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} —Ä–æ–∑–±–∞–Ω–µ–Ω–æ!")
            else:
                await message.answer("‚ö†Ô∏è –í—ñ–Ω –Ω–µ –≤ –±–∞–Ω—ñ!")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–∞–∫: /unban user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ —Ä–æ–∑–±–∞–Ω—é–≤–∞—Ç–∏!")


@dp.message_handler(commands=["setadmin"])
async def set_admin(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.get_args()
        if args.isdigit():
            user_id = int(args)
            if user_id not in ADMINS:
                ADMINS.append(user_id)
                save_json("admins.json", ADMINS)
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ–¥–∞–Ω–æ –≤ –∞–¥–º—ñ–Ω–∏!")
            else:
                await message.answer("‚ö†Ô∏è –í—ñ–Ω –≤–∂–µ –∞–¥–º—ñ–Ω!")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–∞–∫: /setadmin user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤!")


@dp.message_handler(commands=["deleteadmin"])
async def delete_admin(message: types.Message):
    if message.from_user.id in ADMINS:
        args = message.get_args()
        if args.isdigit():
            user_id = int(args)
            if user_id in ADMINS:
                ADMINS.remove(user_id)
                save_json("admins.json", ADMINS)
                await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞–¥–º—ñ–Ω—ñ–≤!")
            else:
                await message.answer("‚ö†Ô∏è –í—ñ–Ω –Ω–µ –∞–¥–º—ñ–Ω!")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ç–∞–∫: /deleteadmin user_id")
    else:
        await message.answer("‚õî –£ —Ç–µ–±–µ –Ω–µ–º–∞ –ø—Ä–∞–≤ –≤–∏–¥–∞–ª—è—Ç–∏ –∞–¥–º—ñ–Ω—ñ–≤!")


@dp.message_handler(commands=["GetUserId"])
async def get_user_id(message: types.Message):
    await message.answer(f"üÜî –¢–≤—ñ–π Telegram ID: {message.from_user.id}")


# ---------------------------
# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/Replit
# ---------------------------
app = Flask('')

@app.route('/')
def home():
    return "–Ø –∂–∏–≤–∏–π!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()


# ---------------------------
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ---------------------------
if __name__ == "__main__":
    keep_alive()
    executor.start_polling(dp, skip_updates=True)
